#!/usr/bin/env python
# coding: utf-8

# In[1]:


# Import necessary libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


# In[49]:


#Load the dataset
data= pd.read_csv("C:\\Users\\Sai Akhil\\OneDrive\\Desktop\\conference\\heart.csv")


# In[3]:


data


# In[4]:


data.head()


# In[5]:


data.describe()


# In[6]:


print(data.columns)


# In[7]:


data.isnull().sum()


# In[8]:


# Visualize the target variable distribution
plt.figure(figsize=(8, 5))
sns.countplot(x='target', data=data, palette='viridis')
plt.title('Distribution of Target Variable (Heart Disease)')
plt.xlabel('Heart Disease (1 = Yes, 0 = No)')
plt.ylabel('Count')
plt.show()


# In[9]:


# Correlation heatmap to understand feature relationships
plt.figure(figsize=(14, 10))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()


# In[10]:


#Preprocess the data
# Separate features (X) and target variable (y)
X = data.drop(columns=['target'])  # Features
y = data['target']  # Target (1 = Heart Disease, 0 = No Heart Disease)


# In[11]:


# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# In[12]:


# Scale the features for better model performance
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


# In[13]:


#Train the Logistic Regression Model
model = LogisticRegression(random_state=42)
model.fit(X_train, y_train)


# In[14]:


# Make predictions on the test set
y_pred_train = model.predict(X_train)  # Predictions on training data
y_pred_test = model.predict(X_test)    # Predictions on test data


# In[15]:


#Evaluate the model
# Calculate accuracy on training data
train_accuracy = accuracy_score(y_train, y_pred_train)
print(f'\nTraining Accuracy: {train_accuracy * 100:.2f}%')
# Calculate accuracy on test data
test_accuracy = accuracy_score(y_test, y_pred_test)
print(f'Testing Accuracy: {test_accuracy * 100:.2f}%')


# In[16]:


# Print classification report for detailed metrics
print("\nClassification Report (Testing Data):")
print(classification_report(y_test, y_pred_test))


# In[17]:


# Print confusion matrix to see true positives, false positives, etc.
print("\nConfusion Matrix (Testing Data):")
cm = confusion_matrix(y_test, y_pred_test)
print(cm)


# In[18]:


# Plot the confusion matrix using seaborn heatmap
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()


# In[26]:


#  Predict on a new sample (Example)
# Define a new sample with appropriate feature values
# [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]
new_sample = [[34, 0, 1, 118, 210, 0, 1, 192, 0, 0.7, 2, 0, 2]]  # Example features

# Scale the new sample using the same scaler used on training data
new_sample_scaled = scaler.transform(new_sample)  # Don't forget to scale new samples

# Predict using the trained model
prediction = model.predict(new_sample_scaled)

# Output the prediction result
if prediction == 1:
    print("The patient is predicted to have heart disease.")
else:
    print("The patient is predicted not to have heart disease.")


# In[20]:


##Explanation of the sample values:
##age: 30 (younger individuals generally have a lower risk).
##sex: 0 (female, typically a lower risk factor).
##cp: 0 (no chest pain, which decreases risk).
##trestbps: 120 (normal resting blood pressure).
##chol: 180 (lower cholesterol level).
##fbs: 0 (fasting blood sugar not elevated).
##restecg: 1 (normal results from resting electrocardiographic test).
##thalach: 170 (higher maximum heart rate during exercise).
##exang: 0 (no exercise-induced angina).
##ldpeak: 0.0 (no ST depression during exercise).
##slope: 2 (slope of the peak exercise ST segment, normal).
##ca: 0 (no major vessels colored by fluoroscopy).
##thal: 2 (normal thalassemia result).


# In[27]:


new_sample = [[60,1,0,125,258,0,0,141,1,2.8,1,1,3]]  
new_sample_scaled = scaler.transform(new_sample)
prediction = model.predict(new_sample_scaled)
if prediction == 0:
    print("The patient is predicted not to have heart disease.")
else:
    print("The patient is predicted to have heart disease.")


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[36]:


# Define a function that predicts heart disease based on cholesterol thresholds
def predict_based_on_cholesterol_threshold(cholesterol_value):
    """
    This function predicts heart disease based on cholesterol levels:
    - Cholesterol < 150: No heart disease
    - Cholesterol >= 150: Heart disease
    """
    if cholesterol_value < 150:
        print(f"Cholesterol level = {cholesterol_value}: The patient is predicted not to have heart disease.")
    else:
        print(f"Cholesterol level = {cholesterol_value}: The patient is predicted to have heart disease.")

# Example: Checking predictions for different cholesterol levels
for chol_level in [100, 120, 140, 150, 160, 180, 200, 220, 250]:
    predict_based_on_cholesterol_threshold(chol_level)


# In[40]:


# Define a function that predicts heart disease based on changing cholesterol levels
def predict_with_normal_features(cholesterol_value):
    """
    This function predicts heart disease while keeping all other features at normal levels.
    The only changing feature is cholesterol.
    """
    # Set features to normal levels as per your explanation
    # [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]
    new_sample = [
        [30, 0, 0, 120, cholesterol_value, 0, 1, 170, 0, 0.0, 2, 0, 2]  # Normal feature values
    ]
    
    # Scale the new sample using the same scaler
    new_sample_scaled = scaler.transform(new_sample)

    # Predict using the trained model
    prediction = model.predict(new_sample_scaled)

    # Output the prediction result
    if prediction[0] == 0:
        print(f"Cholesterol level = {cholesterol_value}: The patient is predicted not to have heart disease.")
    else:
        print(f"Cholesterol level = {cholesterol_value}: The patient is predicted to have heart disease.")

# Example: Checking predictions for different cholesterol levels
for chol_level in [40, 140, 150, 160, 180, 200, 220]:
    predict_with_normal_features(chol_level)


# In[41]:


# Assuming model is already trained and we have X defined as features

# Checking the feature importance (coefficients) of the model
coefficients = pd.DataFrame({
    'Feature': X.columns,
    'Coefficient': model.coef_[0]
})

# Sort by the absolute value of the coefficients
coefficients['Absolute Coefficient'] = coefficients['Coefficient'].abs()
sorted_coefficients = coefficients.sort_values(by='Absolute Coefficient', ascending=False)

print(sorted_coefficients)


# In[45]:


# Define a function that predicts heart disease based on changing cp values
def predict_with_fixed_features(cp_value):
    """
    This function predicts heart disease while keeping all other features at constant levels.
    The only changing feature is cp (chest pain type).
    """
    # Set features to fixed values
    # [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]
    new_sample = [
        [30, 0, cp_value, 120, 180, 0, 1, 170, 0, 0.0, 2, 0, 2]  # Fixed feature values
    ]
    
    # Scale the new sample using the same scaler
    new_sample_scaled = scaler.transform(new_sample)

    # Predict using the trained model
    prediction = model.predict(new_sample_scaled)

    # Output the prediction result
    if prediction[0] == 0:
        print(f"cp value = {cp_value}: The patient is predicted not to have heart disease.")
    else:
        print(f"cp value = {cp_value}: The patient is predicted to have heart disease.")

# Example: Checking predictions for different cp values
for cp_value in [0, 1]:  # cp values range from 0 to 3
    predict_with_fixed_features(cp_value)


# In[ ]:




